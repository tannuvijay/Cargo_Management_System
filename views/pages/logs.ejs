<% include('../layouts/main.ejs') %>

<style>
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    min-height: 100vh;
    margin: 0;
    font-family: 'Arial', sans-serif;
    background: radial-gradient(circle at bottom, #011307, #001736);
    color: #ffffff;
    position: relative;
    display: flex;
    justify-content: center;
    align-items: flex-start;
    padding: 40px 0;
    overflow-y: auto; /* Enable scroll */
}

.stars {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    pointer-events: none;
    z-index: -1;
    animation: star-scroll 60s linear infinite;
}

@keyframes star-scroll {
    0% {
        transform: translateY(0);
    }
    100% {
        transform: translateY(-100%);
    }
}

.star {
    width: 2px;
    height: 2px;
    position: absolute;
    background: white;
    border-radius: 50%;
    opacity: 0.6;
    animation: twinkling 2s infinite ease-in-out;
}

@keyframes twinkling {
    0%, 100% { opacity: 0.2; }
    50% { opacity: 1; }
}

.container {
    max-width: 100%;
    width: 90%;
    background: rgba(0, 0, 0, 0.3);
    border-radius: 16px;
    padding: 40px 20px;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.4);
    backdrop-filter: blur(6px);
    text-align: center;
    overflow: hidden; /* No overflow for the container */
}

h2 {
    font-size: 32px;
    color: #f0f0f0;
    margin-bottom: 30px;
    font-weight: bold;
    text-shadow: 0 0 8px rgba(255, 255, 255, 0.6);
}

.filters {
    background-color: rgba(255, 255, 255, 0.05);
    padding: 20px;
    border-radius: 10px;
    margin-bottom: 20px;
}

label {
    font-weight: 600;
    color: #ddd;
    display: block;
    text-align: left;
    margin-bottom: 6px;
}

.form-select {
    background-color: #0e2230;
    border: 1px solid #555;
    color: #fff;
    width: 100%;
    padding: 10px;
    border-radius: 6px;
}

.form-select:focus {
    border-color: #00bfff;
    box-shadow: 0 0 5px #00bfff;
    outline: none;
}

.btn {
    padding: 10px 20px;
    font-weight: bold;
    border: none;
    border-radius: 8px;
    background: linear-gradient(135deg, #00c6ff, #0072ff);
    color: white;
    cursor: pointer;
    transition: transform 0.2s, box-shadow 0.2s;
    margin-top: 15px;
}

.btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 183, 255, 0.5);
}

#logs-result {
    margin-top: 30px;
    color: #ccc;
    font-size: 16px;
}

/* Table container for both vertical and horizontal scroll */
.table-container {
    max-height: 400px; /* Adjust the height as per your requirement */
    overflow-y: auto; /* Vertical scroll */
    overflow-x: auto; /* Horizontal scroll */
    margin-top: 20px;
    width: 100%;
    padding-bottom: 10px; /* To ensure the scrollbar doesn't overlap content */
}

/* Ensuring table scrolls */
table {
    width: 100%;
    border-collapse: collapse;
    background-color: rgba(255, 255, 255, 0.05);
    border-radius: 10px;
    overflow: hidden;
    backdrop-filter: blur(5px);
    min-width: 100%; /* Ensure table width spans the entire available space */
}

/* Styling for table headers and cells */
th, td {
    padding: 12px;
    text-align: center;
    border-bottom: 1px solid #333;
    color: #f2f2f2;
}

th {
    background-color: #007bff;
    color: white;
    font-weight: bold;
}

tr:hover {
    background-color: rgba(255, 255, 255, 0.07);
}

.alert {
    padding: 15px;
    border-radius: 8px;
    margin-top: 20px;
    font-weight: 500;
    text-align: center;
}

.alert-info {
    background-color: rgba(0, 123, 255, 0.2);
    color: #cce5ff;
}

.alert-danger {
    background-color: rgba(255, 0, 0, 0.2);
    color: #f8d7da;
}

ul {
    list-style-type: none;
    padding-left: 0;
}

li {
    margin-bottom: 15px;
    background-color: rgba(255, 255, 255, 0.05);
    padding: 10px;
    border-radius: 8px;
    color: #ddd;
}

@media (max-width: 600px) {
    .container {
        padding: 20px 10px;
    }

    h2 {
        font-size: 24px;
    }

    .btn {
        width: 100%;
    }

    table, thead, tbody, th, td, tr {
        font-size: 14px;
    }
}


</style>
<body>
<div class="stars" id="stars"></div>

<div class="container">
  <h2>System Logs</h2>
  
  <div class="filters mb-3">
    <label for="actionType" class="form-label">Action Type:</label>
    <select id="actionType" class="form-select mb-2">
      <option value="">All</option>
      <option value="retrieval">Retrieval</option>
      <option value="rearrangement">Rearrangement</option>
      <option value="disposal">Disposal</option>
    </select>

    <div id="dynamic-inputs" class="mt-3"></div>

    <button id="get-logs" class="btn btn-info mt-2">Fetch Logs</button>
  </div>

  <div id="logs-result" class="mt-4">
    <!-- Log results will appear here -->
  </div>
</div>
</body>

<script>
  const starsContainer = document.getElementById('stars');
  const numStars = 100; // Number of stars
  for (let i = 0; i < numStars; i++) {
    const star = document.createElement('div');
    star.classList.add('star');
    star.style.top = Math.random() * 100 + '%'; // Random vertical position
    star.style.left = Math.random() * 100 + '%'; // Random horizontal position
    starsContainer.appendChild(star);
  }
  console.log("Hello");
  const actionTypeSelect = document.getElementById("actionType");
  const dynamicInputs = document.getElementById("dynamic-inputs");

  // Update dynamic inputs based on selected action type
  actionTypeSelect.addEventListener("change", () => {
    const selectedActionType = actionTypeSelect.value;
    dynamicInputs.innerHTML = ""; // Clear existing inputs

    if (selectedActionType === "retrieval") {
      // Show itemId input for retrieval
      dynamicInputs.innerHTML = `
        <label for="itemId" class="form-label">Item ID:</label>
        <input type="text" id="itemId" class="form-control mb-2" placeholder="Enter Item ID">

        <label for="startDate" class="form-label">Start Date:</label>
        <input type="date" id="startDate" class="form-control mb-2" required>

        <label for="endDate" class="form-label">End Date:</label>
        <input type="date" id="endDate" class="form-control mb-2" required>

      `;
    } else if (selectedActionType === "rearrangement") {
      // Show inputs for rearrangement
      dynamicInputs.innerHTML = `
        <label for="userId" class="form-label">User ID:</label>
        <input type="text" id="userId" class="form-control mb-2" placeholder="Enter User ID">

        <label for="containerFrom" class="form-label">Container From:</label>
        <input type="text" id="containerFrom" class="form-control mb-2" placeholder="Enter From Container ID">

        <label for="containerTo" class="form-label">Container To:</label>
        <input type="text" id="containerTo" class="form-control mb-2" placeholder="Enter To Container ID">

        <label for="itemId" class="form-label">Item ID:</label>
        <input type="text" id="itemId" class="form-control mb-2" placeholder="Enter Item ID">
      `;
    } else {
      dynamicInputs.innerHTML = ""; // Clear inputs for unsupported action types
    }
  });
  console.log("Hi");
  const logsBtn = document.getElementById("get-logs");
  
  logsBtn.addEventListener("click", async () => {
    
    try {
      // Get selected action type
      const actionType = actionTypeSelect.value;
      if(actionType === "retrieval"){
      const startDate=document.getElementById("startDate").value;
      const endDate=document.getElementById("endDate").value;
      console.log("hmm",startDate);
      
      // Construct query parameters
      const queryParams = new URLSearchParams();
      if (actionType) queryParams.append("actionType", actionType);
      if (startDate) queryParams.append("startDate", startDate);
      if (endDate) queryParams.append("endDate", endDate);
      // Add dynamic input values based on action type
      if (actionType === "retrieval") {
        const itemId = document.getElementById("itemId").value;
        if (itemId) queryParams.append("itemId", itemId);
      } 
      console.log("hhhhh",queryParams);
      // Fetch logs with filters
      const response = await fetch(`/api/logs?${queryParams.toString()}`);

      // Handle cases where the response isn't OK
      if (!response.ok) {
        throw new Error("Failed to fetch logs");
      }

      const data = await response.json();

      // Debug response and data
      console.log("API Response Status:", response.status);
      console.log("Logs Data:", data);

      // Display logs
      const logsResult = document.getElementById("logs-result");
      if (data.logs && data.logs.length > 0) {
        logsResult.innerHTML = `
          <table class="table table-striped">
            <thead>
              <tr>
                <th>Timestamp</th>
                <th>Action Type</th>
                <th>Item ID</th>
                <th>Container ID</th>
                <th>Retrieval Steps</th>
                <th>Details</th>
              </tr>
            </thead>
            <tbody>
              ${data.logs.map(log => `
                <tr>
                  <td>${new Date(log.timestamp).toLocaleString()}</td>
                  <td>${log.actionType}</td>
                  <td>${log.itemId || 'N/A'}</td>
                  <td>${log.containerId || 'N/A'}</td>
                  <td>${log.retrieval_step || 'N/A'}</td>
                  <td>
                    ${
                      log.details
                        ? log.details.fromContainer && log.details.toContainer
                          ? `Moved from ${log.details.fromContainer} to ${log.details.toContainer}`
                          : log.details.reason || 'No additional details'
                        : 'N/A'
                    }
                  </td>
                </tr>
              `).join('')}
            </tbody>
          </table>
        `;
      }
      } 
      else if (actionType === "rearrangement") {
        const userId = document.getElementById("userId").value;
        const containerFrom = document.getElementById("containerFrom").value;
        const containerTo = document.getElementById("containerTo").value;
        const itemId = document.getElementById("itemId").value;
      
        // Construct query parameters
        const queryParams = new URLSearchParams();
        if (userId) queryParams.append("userId", userId);
        if (containerFrom) queryParams.append("containerFrom", containerFrom);
        if (containerTo) queryParams.append("containerTo", containerTo);
        if (itemId) queryParams.append("itemId", itemId);
      
        try {
          // Fetch logs for rearrangement
          const response = await fetch(`/api/logs/rearrange?${queryParams.toString()}`);
      
          // Handle cases where the response isn't OK
          if (!response.ok) {
            throw new Error("Item is not present in that container.");
          }
      
          const data = await response.json();
          console.log(data);
          // Debug response and data
          console.log("API Response Status:", response.status);
          console.log("Logs Data:", data);
      
          // Display logs
          const logsResult = document.getElementById("logs-result");
          if (data.logEntry && data.logEntry.length > 0) {
            logsResult.innerHTML = `
              <table class="table table-striped">
                <thead>
                  <tr>
                    <th>Log ID</th>
                    <th>Action Type</th>
                    <th>Item ID</th>
                    <th>Container</th>
                    <th>Details</th>
                    <th>Timestamp</th>
                  </tr>
                </thead>
                <tbody>
                  ${data.logEntry.map(log => `
                    <tr>
                      <td>${log._id || "N/A"}</td>
                      <td>${log.actionType || "N/A"}</td>
                      <td>${log.itemId || "N/A"}</td>
                      <td>${log.containerId || "N/A"}</td>
                      <td>
                        ${log.details ? `
                          <ul>
                            ${log.details.position ? `<li>Position: ${JSON.stringify(log.details.position)}</li>` : ""}
                          </ul>
                        ` : "No additional details"}
                      </td>
                      <td>${new Date(log.timestamp).toLocaleString() || "N/A"}</td>
                    </tr>
                  `).join('')}
                </tbody>
              </table>
            `;
          } else {
            logsResult.innerHTML = `
              <div class="alert alert-info text-center">
                No rearrangement log entries available.
              </div>
            `;
          }
        } catch (error) {
          console.error("Error fetching rearrangement logs:", error.message);
          document.getElementById("logs-result").innerHTML = `
            <div class="alert alert-danger text-center">
              An error occurred while fetching rearrangement logs: ${error.message}.
            </div>
          `;
        }
      }
      else if (actionType === "disposal") {
        const response = await fetch(`/api/logs/disposal`);
        if (!response.ok) {
          throw new Error("Item is not present in that container.");
        }
        const data = await response.json();
        console.log(data);
        const logsResult = document.getElementById("logs-result");
        console.log(data.disposedLogs);
        if (data.disposedLogs && data.disposedLogs.length > 0) {
          logsResult.innerHTML = `
            <ul>
              ${data.disposedLogs.map(log => `
                <li>
                  <strong>Action Type:</strong> ${log.actionType}<br>
                  <strong>Container ID:</strong> ${log.containerId || 'N/A'}<br>
                  <strong>Details:</strong><br>
                  &nbsp;&nbsp;<strong>Message:</strong> ${log.details?.message || 'No details available'}<br>
                  &nbsp;&nbsp;<strong>Item ID:</strong> ${log.itemId || 'N/A'}<br>
                  &nbsp;&nbsp;<strong>Expiry Date:</strong> ${log.expiryDate ? new Date(log.expiryDate).toLocaleDateString() : 'N/A'}<br>
                  &nbsp;&nbsp;<strong>Timestamp:</strong> ${new Date(log.timestamp).toLocaleString()}<br>
                  <strong>ID:</strong> ${log._id}
                </li>
              `).join('')}
            </ul>
          `;
        } else {
          logsResult.innerHTML = `<p>No disposal logs found.</p>`;
        }
      }
      else {
        logsResult.innerHTML = `<div class="alert alert-info text-center">No logs available for the selected filters.</div>`;
      }
    } catch (error) {
      console.error("Error fetching logs:", error);
      document.getElementById("logs-result").innerHTML = `<div class="alert alert-danger text-center">An error occurred while fetching logs: ${error.message}</div>`;
    }
  
  });
  
</script>